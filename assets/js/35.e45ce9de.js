(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{392:function(t,e,s){"use strict";s.r(e);var n=s(42),i=Object(n.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" set")]),t._v(" "),s("p",[t._v("set: 是一个无序的集合，集合中元素都是唯一的。set 对象的编码可以是 intset 或者 hashtable;inset 编码的集合对象使用的是整数集合作为底层实现。而底层是字典时，只不过所有的 value 都是 null。")]),t._v(" "),s("h5",{attrs:{id:"_4-1-intset-整数集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-intset-整数集合"}},[t._v("#")]),t._v(" 4.1 intset （整数集合）")]),t._v(" "),s("p",[t._v("intset的内存是连续的，所有的数据增删改查操作都是在内存地址偏移的基础上进行的，并且整数的保存也是有序的，intset的内存示意图如下：\n"),s("img",{attrs:{src:"https://gitee.com/rule-liu/pic/raw/master/img/20211023210831.png",alt:""}})]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#define INTSET_ENC_INT16 (sizeof(int16_t))   //16位，2个字节，表示范围-32,768~32,767\n#define INTSET_ENC_INT32 (sizeof(int32_t))   //32位，4个字节，表示范围-2,147,483,648~2,147,483,647\n#define INTSET_ENC_INT64 (sizeof(int64_t))   //64位，8个字节，表示范\ntypedef struct intset {\n    // 编码方式，一个元素所需要的内存大小，INTSET_ENC_INT16，INTSET_ENC_INT32，INTSET_ENC_INT64三种类型\n    uint32_t encoding;\n    // 集合长度\n    uint32_t length;\n    // 集合数组:按照从小到大有序排列的，并且元素不重复\n    int8_t contents[];\n} intset;\n")])])]),s("h5",{attrs:{id:"_4-2-intset-的升级过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-intset-的升级过程"}},[t._v("#")]),t._v(" 4.2 intset 的升级过程")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("当 contents 中存储的数据为：1，2，3，4，如果当前的 encoding 为16位，结构如下\n"),s("img",{attrs:{src:"https://gitee.com/rule-liu/pic/raw/master/img/20211023212802.png",alt:""}})])]),t._v(" "),s("li",[s("p",[t._v("现在新插入元素 400000，没有包含在 encoding=16位的，那么就需要修改编码格式，新增内存。")])]),t._v(" "),s("li",[s("p",[t._v("新增大元素后，肯定会放在数组的尾部，后续从尾部调整原来元素的编码格式，将他们进行移动，如下图就是移动后的内存结构。\n"),s("img",{attrs:{src:"https://gitee.com/rule-liu/pic/raw/master/img/20211023213707.png",alt:""}})])]),t._v(" "),s("li",[s("p",[t._v("为什么不从前往后呢？\n因为从前往后，会覆盖元素，又要进行元素的拷贝等操作。从后往前则只需要新增内存。这样升级的好处是")])])]),t._v(" "),s("ul",[s("li",[t._v("通过三种编码格式，提升整数集合的灵活性")]),t._v(" "),s("li",[t._v("尽可能节约内存")]),t._v(" "),s("li",[t._v("一旦对数组进行升级，编码就会一直保存升级后的状态。即使后面把 400000 删掉了，编码格式还是不会将会INTSET_ENC_INT16。")])]),t._v(" "),s("h5",{attrs:{id:"_4-3-intset-编码转换-hashtable-条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-intset-编码转换-hashtable-条件"}},[t._v("#")]),t._v(" 4.3 intset 编码转换 hashtable 条件")]),t._v(" "),s("p",[t._v("当 set 对象可以同时满足以下条件，则为 intset 编码：")]),t._v(" "),s("ol",[s("li",[t._v("set 对象保存的所有元素都是整数")]),t._v(" "),s("li",[t._v("set 对象保存的元素数量不超过 512个；\n不满足上述情况，则使用 hashtable 编码。")])])])}),[],!1,null,null,null);e.default=i.exports}}]);
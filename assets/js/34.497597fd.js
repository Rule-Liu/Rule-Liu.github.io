(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{395:function(t,i,n){"use strict";n.r(i);var e=n(42),s=Object(e.a)({},(function(){var t=this,i=t.$createElement,n=t._self._c||i;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h3",{attrs:{id:"list"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[t._v("#")]),t._v(" list")]),t._v(" "),n("p",[t._v("list 中文翻译为：列表，目前 6.2 的版本中，数据结构为 quicklist， 但是逻辑结构其实是 linkedlist + ziplist 的混合体，它将linkedlist 按段切分，每一段使用 ziplist 来紧凑存储，多个 ziplist 之间使用双向指针串接起来。其中每个节点的数据结构如下，根据单个节点结构 quicklistNode 可以看出，通过 prev, next 指针组成双向链表，其中 head，tail 节点值为 null。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/rule-liu/pic/raw/master/img/image-20210615220618843.png",alt:"image-20210615220618843"}})]),t._v(" "),n("h6",{attrs:{id:"_2-1-ziplist"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-ziplist"}},[t._v("#")]),t._v(" 2.1 ziplist")]),t._v(" "),n("p",[t._v("ziplist 压缩列表，顾名思义，可以它具有很高的内存效率，节省空间，只存储整数值和字符串，通过利用时间换空间的概念，达到节省空间，结构如下，分别时 ziplist 和 zlentry。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/rule-liu/pic/raw/master/img/20211023120512.png",alt:""}})]),t._v(" "),n("ul",[n("li",[t._v("zlbytes：32bit无符号整数，表示ziplist占用的字节总数(包括本身占用的4个字节)；")]),t._v(" "),n("li",[t._v("zltail：32bit无符号整数，记录最后一个entry的偏移量，方便快速定位到最后一个entry；")]),t._v(" "),n("li",[t._v("zllen：16bit无符号整数，记录entry的个数；")]),t._v(" "),n("li",[t._v("entry：存储的若干个元素，可以为字节数组或者整数；")]),t._v(" "),n("li",[t._v("zlend：ziplist最后一个字节，是一个结束的标记位，值固定为255。")])]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 创建空的压缩链表函数，没有定义实际的ziplist 结构\nunsigned char *ziplistNew(void) {\n    // ZIPLIST_HEADER_SIZE：zlbytes + zltail + zllen = 10个字节\n    // ZIPLIST_END_SIZE：zlend，1个字节\n    unsigned int bytes = ZIPLIST_HEADER_SIZE+ZIPLIST_END_SIZE;\n    // 申请内存（11个字节）\n    unsigned char *zl = zmalloc(bytes);\n    // zlbytes赋值\n    ZIPLIST_BYTES(zl) = intrev32ifbe(bytes);\n    // zltail赋值\n    ZIPLIST_TAIL_OFFSET(zl) = intrev32ifbe(ZIPLIST_HEADER_SIZE);\n    // zllen赋值\n    ZIPLIST_LENGTH(zl) = 0;\n    // zlend赋值\n    zl[bytes-1] = ZIP_END;\n    return zl;\n}\n")])])]),n("p",[t._v("zlentry 为 ziplist 中的 entry节点，ziplist中的每个 entry 均包含两个信息：prevrawlen 和 encoding。prevrawlen 字段：存储前一个entry的长度，以便能够从后到前遍历列表。encoding表示entry类型，整数或字符串，对于字符串，还表示字符串有效负载的长度。 因此，完整的entry存储形式如下：")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/rule-liu/pic/raw/master/img/20211023131701.png",alt:""}})]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// ziplist 的 entry 节点\ntypedef struct zlentry {\n    // 用于编码前一个 entry 大小的字节数\n    unsigned int prevrawlensize; \n    // 前一个 entry 的大小\n    unsigned int prevrawlen;   \n    // 用于编码当前 entry 大小的字节数 \n    unsigned int lensize;  \n    // 当前 entry 的实际大小      \n    unsigned int len;            \n    // prevrawlensize + lensize.\n    unsigned int headersize;     \n    // 判断存储的数据是字符串(字节数组)还是整型\n    unsigned char encoding;    \n    // 节点value值  \n    unsigned char *p;            \n} zlentry;\n")])])]),n("blockquote",[n("p",[t._v("zlentry 存储了上一个 entry 的大小，那么就可以根据ziplist 的特点，从后也可以进行遍历，但是当 ziplist 添加或者删除元素时，最坏情况下会执行N次空间重分配，因为每个 entry 都具有前一个 entry 的信息，而每次空间分配的最坏复杂度为O(N)，所以连锁更新的最坏复杂度为 O(N*N)")])]),t._v(" "),n("h6",{attrs:{id:"_2-2-quicklist"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-quicklist"}},[t._v("#")]),t._v(" 2.2 quicklist")]),t._v(" "),n("p",[t._v("quicklist 是一个双向链表，并且是一个 ziplist 的双向链表，也就是说 quicklist 的每个节点都是一个 ziplist。结合了 linkedlist 和 ziplist 的优点，")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/rule-liu/pic/raw/master/img/20211023180547.png",alt:""}})]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// quicklist 压缩结构\ntypedef struct quicklistLZF {\n    unsigned int sz; /* LZF size in bytes*/\n    char compressed[];\n} quicklistLZF;\n\n// quicklist 节点结构\ntypedef struct quicklistNode {\n    struct quicklistNode *prev;\n    struct quicklistNode *next;\n    unsigned char *zl;//数据指针。如果当前节点的数据没有压缩，那么它指向一个ziplist结构；否则，它指向一个quicklistLZF 结构。\n    unsigned int sz;  // zipList 大小           \n    unsigned int count : 16;   // ziplist 的元素数量 \n    unsigned int encoding : 2;   //原生字节数组==1 还是 LZF 压缩的==2\n    unsigned int container : 2;  /* NONE==1 or ZIPLIST==2 */\n    unsigned int recompress : 1; /* was this node previous compressed? */\n    unsigned int attempted_compress : 1; /* node can't compress; too small */\n    unsigned int extra : 10; /* more bits to steal for future usage */\n} quicklistNode;\n\n// quicklist 结构\ntypedef struct quicklist {\n    quicklistNode *head;\n    quicklistNode *tail;\n    unsigned long count;   // 所有元素总数\n    unsigned long len;    // quicklistNode 节点总数\n    int fill : QL_FILL_BITS; // 为单个节点填充因子\n    unsigned int compress : QL_COMP_BITS; // LZF 算法压缩深度；0=off\n    unsigned int bookmark_count: QL_BM_BITS;\n    quicklistBookmark bookmarks[];\n} quicklist;\n\n")])])]),n("blockquote",[n("p",[t._v("适用场景列表键、发布订阅、慢查询、监视器等。\n为了进一步节约空间，redis 还会对 ziplist 进行压缩存储，使用 LZF 算法压缩，可以选择压缩深度。")])]),t._v(" "),n("h6",{attrs:{id:"_2-3-为什么使用-quicklist"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-为什么使用-quicklist"}},[t._v("#")]),t._v(" 2.3 为什么使用 quicklist？")]),t._v(" "),n("ul",[n("li",[t._v("redis 原来使用linkedlist 和 ziplist 作为 list 对象的底层数据结构，根据 key 的键大小或者 list 中的元素总数进行切换。当键不是很大时，或者 list 中元素不多时，使用 ziplist，通过时间换空间的思路去减少内存空间占用，因为此时 list 中的元素也不多，时间消耗几乎很少。")]),t._v(" "),n("li",[t._v("当 list 中元素增多时，无论是增加或者是减少元素，那么都会对ziplist 造成O(N*N)的复杂度，造成时间消耗增多，降低了性能 。")]),t._v(" "),n("li",[t._v("linkedlist 双向链表方便从头、尾节点进行操作，但是内存消耗大。每个节点要多额外保存两个指针：prev、next。当数据量大时，ziplist 需要连续的空间，但是 linkedlist 则不需要。这也就是以前版本当元素过多时，会转换尾 linkedlist。")]),t._v(" "),n("li",[t._v("为了综合上述的优缺点，quicklist 使得空间效率和时间效率的折中，即存在双端队列，又分散了 ziplist。")])])])}),[],!1,null,null,null);i.default=s.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{372:function(a,l,t){"use strict";t.r(l);var n=t(42),e=Object(n.a)({},(function(){var a=this,l=a.$createElement,t=a._self._c||l;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h3",{attrs:{id:"工厂方法模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工厂方法模式"}},[a._v("#")]),a._v(" 工厂方法模式")]),a._v(" "),t("h4",{attrs:{id:"定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[a._v("#")]),a._v(" 定义")]),a._v(" "),t("p",[a._v("定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。")]),a._v(" "),t("h4",{attrs:{id:"结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结构"}},[a._v("#")]),a._v(" 结构")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://ftp.bmp.ovh/imgs/2021/02/a73475fdbe13cd54.png",alt:""}})]),a._v(" "),t("h4",{attrs:{id:"具体实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#具体实现"}},[a._v("#")]),a._v(" 具体实现")]),a._v(" "),t("p",[a._v("目前有企业需要生产篮球、足球和排球。目前准备给每一种球类有一个对应的工厂，它们都继承于一个抽象球工厂类。当然也有一个抽象的产品球类，具体产品篮球、足球和排球类都继承它。他们都有共同的方法就是玩，具体实现如下")]),a._v(" "),t("ul",[t("li",[a._v("抽象工厂类（BallFactory）")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("/**\n*\n* @description: 抽象球工厂类\n* @author: liurui-1\n* @date: 2019/7/8 18:00\n* @version: 1.0.0\n*/\npublic abstract class BallFactory {\n    public abstract Ball createFactory();\n}\n")])])]),t("ul",[t("li",[t("p",[a._v("ConcreteFactory实现类（苹果工厂和三星工厂具体实现类）")])]),a._v(" "),t("li",[t("p",[a._v("具体工厂类（BasketBallFactory、FootBallFactory和VolleyBallFactory）")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("/**\n*\n* @description: 篮球工厂类\n* @author: liurui-1\n* @date: 2019/7/8 17:27\n* @version: 1.0.0\n*/\npublic class BasketBallFactory extends BallFactory {\n    @Override\n    public Ball createFactory() {\n        return new BasketBall();\n    }\n}\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("/**\n*\n* @description: 足球工厂类\n* @author: liurui-1\n* @date: 2019/7/8 17:28\n* @version: 1.0.0\n*/\npublic class FootBallFactory extends BallFactory {\n\n    @Override\n    public Ball createFactory() {\n        return new FootBall();\n    }\n}\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("/**\n*\n* @description: 排球工厂类\n* @author: liurui-1\n* @date: 2019/7/8 17:31\n* @version: 1.0.0\n*/\npublic class VolleyBallFactory extends BallFactory {\n\n    @Override\n    public Ball createFactory() {\n        return new VolleyBall();\n    }\n}\n")])])]),t("ul",[t("li",[a._v("抽象产品类（Ball）")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("/**\n*\n* @description: 抽象球产品类\n* @author: liurui-1\n* @date: 2019/7/8 17:35\n* @version: 1.0.0\n*/\npublic abstract class Ball {\n    public abstract void play();\n}\n")])])]),t("ul",[t("li",[a._v("具体产品类（BasketBall、FootBall和VolleyBall）")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('/**\n*\n* @description: 篮球具体产品类\n* @author: liurui-1\n* @date: 2019/7/8 17:39\n* @version: 1.0.0\n*/\npublic class BasketBall extends Ball {\n   @Override\n   public void play() {\n       System.out.println("打篮球");\n   }\n}\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('/**\n* @description: 足球具体产品类\n* @author: liurui-1\n* @date: 2019/7/8 17:40\n* @version: 1.0.0\n*/\npublic class FootBall extends Ball {\n\n   @Override\n   public void play() {\n       System.out.println("踢足球");\n   }\n}\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('/**\n* @description: 排球具体产品类\n* @author: liurui-1\n* @date: 2019/7/8 17:39\n* @version: 1.0.0\n*/\npublic class VolleyBall extends Ball {\n\n  @Override\n  public void play() {\n      System.out.println("打排球");\n  }\n}\n')])])]),t("h4",{attrs:{id:"工厂方法模式测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工厂方法模式测试"}},[a._v("#")]),a._v(" 工厂方法模式测试")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('/**\n* @description: 测试工厂类\n* @author: liurui-1\n* @date: 2019/7/8 17:44\n* @version: 1.0.0\n*/\npublic class FactoryTest {\n\n    public static void main(String[] args) {\n        BallFactory basketBallFactory = new BasketBallFactory();\n        Ball basketBall = basketBallFactory.createFactory();\n        basketBall.play();\n        System.out.println("===================");\n        BallFactory footBallFactory = new FootBallFactory();\n        Ball footBall = footBallFactory.createFactory();\n        footBall.play();\n        System.out.println("===================");\n        BallFactory volleyBallFactory = new VolleyBallFactory();\n        Ball volleyBall = volleyBallFactory.createFactory();\n        volleyBall.play();\n    }\n}\n')])])]),t("p",[t("img",{attrs:{src:"https://i.loli.net/2021/02/12/7x4GFV5gbIWUofH.png",alt:"image.png"}})]),a._v(" "),t("h4",{attrs:{id:"优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优缺点"}},[a._v("#")]),a._v(" 优缺点")]),a._v(" "),t("ul",[t("li",[a._v("优点：")])]),a._v(" "),t("ol",[t("li",[a._v("遵循“开-闭原则”，如果需求变更，需要再进行添加乒乓球类，那么只需要在原来的基础上添加乒乓球工厂类和乒乓球产品类，不需要修改原来的代码")]),a._v(" "),t("li",[a._v("降低了代码的耦合性。")]),a._v(" "),t("li",[a._v("符合“单一职责原则”，每一个工厂只负责自己的产品，不会涉及其它的产品。")])]),a._v(" "),t("ul",[t("li",[a._v("缺点：")])]),a._v(" "),t("ol",[t("li",[a._v("一个具体工厂只能创建一种具体产品。")]),a._v(" "),t("li",[a._v("当增加需求时，会增加了代码量。")])]),a._v(" "),t("blockquote",[t("p",[a._v("注意：工厂方法和简单工厂的区别：简单工厂模式的最大优点在于工厂类中包含了必要的逻辑判断，根据用户的选择条件动态生成实例化的类，对于用户来说，去除了对具体产品的依赖。\n而工厂方法则是用户决定实例化那个工厂，相当于是将判断生成实例化，放在了用户端，而不是工厂代码中。")])])])}),[],!1,null,null,null);l.default=e.exports}}]);
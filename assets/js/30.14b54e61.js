(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{385:function(r,a,t){"use strict";t.r(a);var e=t(42),i=Object(e.a)({},(function(){var r=this,a=r.$createElement,t=r._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[t("h2",{attrs:{id:"垃圾回收机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收机制"}},[r._v("#")]),r._v(" 垃圾回收机制")]),r._v(" "),t("h2",{attrs:{id:"新生代分配机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新生代分配机制"}},[r._v("#")]),r._v(" 新生代分配机制")]),r._v(" "),t("h3",{attrs:{id:"新对象优先存入eden区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新对象优先存入eden区"}},[r._v("#")]),r._v(" 新对象优先存入Eden区")]),r._v(" "),t("ul",[t("li",[t("p",[r._v("Minor GC 触发条件")]),r._v(" "),t("ul",[t("li",[r._v("Eden 区满时，触发一次MinorGC")]),r._v(" "),t("li",[r._v("Full GC之前调用")])])])]),r._v(" "),t("h2",{attrs:{id:"新生代-复制算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新生代-复制算法"}},[r._v("#")]),r._v(" 新生代（复制算法）")]),r._v(" "),t("h3",{attrs:{id:"当eden区满时-触发minor-gc-将eden区中存活对象一次性转移到空的survivor1-中-那么表示eden-区已经清空了-可以再次进行分配。而survivor1-中则存放的是上一次的minor-gc后存活的对象-如果下次eden-区-满-则再次触发minor-gc-将eden区和上一次minorgc-后存活对象的survivor1-区内的存活对象转移到-survivor2-区中-反复如此。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#当eden区满时-触发minor-gc-将eden区中存活对象一次性转移到空的survivor1-中-那么表示eden-区已经清空了-可以再次进行分配。而survivor1-中则存放的是上一次的minor-gc后存活的对象-如果下次eden-区-满-则再次触发minor-gc-将eden区和上一次minorgc-后存活对象的survivor1-区内的存活对象转移到-survivor2-区中-反复如此。"}},[r._v("#")]),r._v(" 当Eden区满时，触发Minor GC，将Eden区中存活对象一次性转移到空的Survivor1 中，那么表示Eden 区已经清空了，可以再次进行分配。而Survivor1 中则存放的是上一次的Minor GC后存活的对象，如果下次Eden 区 满，则再次触发Minor GC，将Eden区和上一次MinorGC 后存活对象的Survivor1 区内的存活对象转移到 Survivor2 区中，反复如此。")]),r._v(" "),t("h2",{attrs:{id:"老年代-标记整理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#老年代-标记整理"}},[r._v("#")]),r._v(" 老年代（标记整理）")]),r._v(" "),t("h3",{attrs:{id:"将老年代中标记的存活对象在内存中移动-让存活对象紧凑靠在一起-然后继续垃圾回收-这样避免了垃圾回收后的带来的过多的内存碎片。先整理后清除。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#将老年代中标记的存活对象在内存中移动-让存活对象紧凑靠在一起-然后继续垃圾回收-这样避免了垃圾回收后的带来的过多的内存碎片。先整理后清除。"}},[r._v("#")]),r._v(" 将老年代中标记的存活对象在内存中移动，让存活对象紧凑靠在一起，然后继续垃圾回收，这样避免了垃圾回收后的带来的过多的内存碎片。先整理后清除。")]),r._v(" "),t("h2",{attrs:{id:"新生代进入老年代条件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新生代进入老年代条件"}},[r._v("#")]),r._v(" 新生代进入老年代条件")]),r._v(" "),t("h3",{attrs:{id:"大对象直接进入老年代-根据参数-xx-pretenuresizethreshold-决定-不会进入新生代"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#大对象直接进入老年代-根据参数-xx-pretenuresizethreshold-决定-不会进入新生代"}},[r._v("#")]),r._v(" 大对象直接进入老年代，根据参数 -XX:PretenureSizeThreshold 决定，不会进入新生代")]),r._v(" "),t("h3",{attrs:{id:"在默认设置下-当对象的年龄达到15岁时-转移到老年代。可以通过设置-xx-maxtenuringthreshold-年龄阈值-默认为15"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在默认设置下-当对象的年龄达到15岁时-转移到老年代。可以通过设置-xx-maxtenuringthreshold-年龄阈值-默认为15"}},[r._v("#")]),r._v(" 在默认设置下，当对象的年龄达到15岁时，转移到老年代。可以通过设置-XX:MaxTenuringThreshold 年龄阈值，默认为15")]),r._v(" "),t("h3",{attrs:{id:"动态年龄-新生代中所有对象的年龄根据规则-年龄1-年龄2-年龄n超过-survivor-区中的50-那么年龄n及以上的对象会放入老年代。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态年龄-新生代中所有对象的年龄根据规则-年龄1-年龄2-年龄n超过-survivor-区中的50-那么年龄n及以上的对象会放入老年代。"}},[r._v("#")]),r._v(" 动态年龄：新生代中所有对象的年龄根据规则：年龄1+年龄2+..+年龄n超过 survivor 区中的50%, 那么年龄n及以上的对象会放入老年代。")]),r._v(" "),t("h3",{attrs:{id:"minor-gc前都会检查新生代全部对象是否小于老年代可用内存大小"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#minor-gc前都会检查新生代全部对象是否小于老年代可用内存大小"}},[r._v("#")]),r._v(" Minor GC前都会检查新生代全部对象是否小于老年代可用内存大小")]),r._v(" "),t("ul",[t("li",[t("p",[r._v("如果检查后，老年代容量足够前提下，那么进行 Minor GC，然后将最后存活的这些对象放入老年代")])]),r._v(" "),t("li",[t("p",[r._v("如果新生代所有对象大于老年代可用内存，表示老年代容量不足时，查看参数-XX:-\nHandlePromotionFailure ，是否设置了担保失败配置，1.6后默认时开启。")]),r._v(" "),t("ul",[t("li",[t("p",[r._v("设置了该参数，判断老年代的内存大小，大于之前每一次Minor GC 后进入老年代对象的平均大小。")]),r._v(" "),t("ul",[t("li",[r._v("如果大于，那么执行Minor GC，执行过后，根据动态年龄规则，将符合规则的存活对象进入Survivor区")]),r._v(" "),t("li",[r._v("剩余存活对象大于Survivor 区的一半，但小于老年代可用内存，那么剩余对象直接进入老年代")]),r._v(" "),t("li",[r._v("剩余对象都大于Survivor、老年代可用内存大小，发生Handle Promotion Failure 担保失败情况，执行Full GC，然后再进行Minor GC，")])])]),r._v(" "),t("li",[t("p",[r._v("设置了该参数，如果小于，那么执行Full GC, 然后再执行Minor GC")]),r._v(" "),t("ul",[t("li",[r._v("Minor GC后，老年代还是没有足够的空间存放Minor GC过后的剩余对象，那么就会导致OOM内存溢出。")])])]),r._v(" "),t("li",[t("p",[r._v("没有设置该参数，执行 Full GC，腾出一些内存空间，然后再执行Minor GC")])])])])]),r._v(" "),t("h2",{attrs:{id:"触发full-gc-条件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#触发full-gc-条件"}},[r._v("#")]),r._v(" 触发Full GC 条件")]),r._v(" "),t("h3",{attrs:{id:"当老年代中存活对象达到老年代一定的比例时-则会触发full-gc。参数为cmsinitiatingoccupancyfaction-默认比例为92"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#当老年代中存活对象达到老年代一定的比例时-则会触发full-gc。参数为cmsinitiatingoccupancyfaction-默认比例为92"}},[r._v("#")]),r._v(" 当老年代中存活对象达到老年代一定的比例时，则会触发Full GC。参数为CMSInitiatingOccupancyFaction，默认比例为92%")]),r._v(" "),t("h3",{attrs:{id:"minor-gc后-新生代对象大于survivor-区、老年代可用内存并且每次进入老年代的平均内存大于老年代可用内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#minor-gc后-新生代对象大于survivor-区、老年代可用内存并且每次进入老年代的平均内存大于老年代可用内存"}},[r._v("#")]),r._v(" Minor GC后，新生代对象大于Survivor 区、老年代可用内存并且每次进入老年代的平均内存大于老年代可用内存")]),r._v(" "),t("h2",{attrs:{id:"concurrent-mode-failure-触发条件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#concurrent-mode-failure-触发条件"}},[r._v("#")]),r._v(" Concurrent Mode Failure 触发条件")]),r._v(" "),t("h3",{attrs:{id:"cms-并发清理清理阶段-cms-只不过回收之前标记好的垃圾对象-应用线程会一直进行-可能会进行minor-gc-那么从年轻代晋升的新的对象-有可能直接放入老年代-这时候-老年代也放不下-就会导致-concurrent-mode-failure-问题。这时-老年代中可能也会存在没人引用的对象-那么这个就是-浮动垃圾-。然后cms会自动降级-使用-serial-old-垃圾回收器-强行系统stw-重新进行标记-清理。当上次minor-gc-再次full-gc-时-则会将当前的full-gc-停止-先将正在执行的full-gc-执行完。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cms-并发清理清理阶段-cms-只不过回收之前标记好的垃圾对象-应用线程会一直进行-可能会进行minor-gc-那么从年轻代晋升的新的对象-有可能直接放入老年代-这时候-老年代也放不下-就会导致-concurrent-mode-failure-问题。这时-老年代中可能也会存在没人引用的对象-那么这个就是-浮动垃圾-。然后cms会自动降级-使用-serial-old-垃圾回收器-强行系统stw-重新进行标记-清理。当上次minor-gc-再次full-gc-时-则会将当前的full-gc-停止-先将正在执行的full-gc-执行完。"}},[r._v("#")]),r._v(' CMS 并发清理清理阶段，CMS 只不过回收之前标记好的垃圾对象，应用线程会一直进行，可能会进行Minor GC, 那么从年轻代晋升的新的对象，有可能直接放入老年代，这时候，老年代也放不下，就会导致  Concurrent Mode Failure 问题。这时，老年代中可能也会存在没人引用的对象，那么这个就是“浮动垃圾”。然后CMS会自动降级，使用"Serial Old"垃圾回收器，强行系统STW，重新进行标记，清理。当上次Minor GC 再次Full GC 时，则会将当前的Full GC 停止，先将正在执行的Full GC 执行完。')])])}),[],!1,null,null,null);a.default=i.exports}}]);
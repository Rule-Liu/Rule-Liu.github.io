(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{377:function(e,n,a){"use strict";a.r(n);var s=a(42),t=Object(s.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"分布式事务解决框架-seata-springcloud-nacos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务解决框架-seata-springcloud-nacos"}},[e._v("#")]),e._v(" 分布式事务解决框架 Seata + SpringCloud + Nacos")]),e._v(" "),a("h2",{attrs:{id:"一、搭建-seata-nacos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、搭建-seata-nacos"}},[e._v("#")]),e._v(" 一、搭建 Seata + Nacos")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("从官网下载 Seata 的源码包和执行文件，由于文件都是在Github托管，可以从下面地址下载："),a("code",[e._v("https://download.csdn.net/download/LarrYFinal/16515872")])])]),e._v(" "),a("li",[a("p",[e._v("修改配置文件  registry.conf、file.conf、conf.txt")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("修改registry.conf，使用的是Nacos作配置中心和注册中心")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('registry {\n  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa\n  type = "nacos"\n  loadBalance = "RandomLoadBalance"\n  loadBalanceVirtualNodes = 10\n  nacos {\n    application = "seata-server"\n    serverAddr = "127.0.0.1:8848"\n    group = "SEATA_GROUP"\n    namespace = "public"\n    cluster = "default"\n    username = "nacos"\n    password = "nacos"\n  }\n}\n\nconfig {\n  # file、nacos 、apollo、zk、consul、etcd3\n  type = "nacos"\n  nacos {\n    serverAddr = "127.0.0.1:8848"\n    namespace = "public"\n    group = "SEATA_GROUP"\n    username = "nacos"\n    password = "nacos"\n  }\n}\n')])])])]),e._v(" "),a("li",[a("p",[e._v("修改 file.conf")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('## transaction log store, only used in seata-server\nstore {\n  ## store mode: file、db、redis\n  mode = "db"\n  ## database store property\n  db {\n    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.\n    datasource = "druid"\n    ## mysql/oracle/postgresql/h2/oceanbase etc.\n    dbType = "mysql"\n    driverClassName = "com.mysql.cj.jdbc.Driver"\n    url = "jdbc:mysql://127.0.0.1:3306/seata?characterEncoding=UTF8&useSSL=false&serverTimezone=Asia/Shanghai"\n    user = "root"\n    password = "123456"\n    minConn = 5\n    maxConn = 100\n    globalTable = "global_table"\n    branchTable = "branch_table"\n    lockTable = "lock_table"\n    queryLimit = 100\n    maxWait = 5000\n  }\n}\n')])])])]),e._v(" "),a("li",[a("p",[e._v("修改config.txt (位于源码包中\\seata-1.4.1-source\\script\\config-center\\config.txt)")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("service.vgroupMapping.my_test_tx_group=default\nservice.default.grouplist=127.0.0.1:8091\nservice.enableDegrade=false\nservice.disableGlobalTransaction=false\nstore.mode=db\nstore.db.datasource=druid \nstore.db.dbType=mysql \nstore.db.driverClassName=com.mysql.cj.jdbc.Driver\nstore.db.url=jdbc:mysql://127.0.0.1:3306/seata?characterEncoding=UTF8&useSSL=false&serverTimezone=Asia/Shanghai\nstore.db.user=root \nstore.db.password=123456 \nstore.db.minConn=5 \nstore.db.maxConn=30 \nstore.db.globalTable=global_table \nstore.db.branchTable=branch_table \nstore.db.queryLimit=100 \nstore.db.lockTable=lock_table \nstore.db.maxWait=5000\n")])])])])])]),e._v(" "),a("li",[a("p",[e._v("初始化数据库脚本（源码包中路径）")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("在路径"),a("code",[e._v("\\seata-1.4.1-source\\script\\server\\db\\mysql.sql")]),e._v(",执行下面的脚本，记住是seata模式下")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("-- -------------------------------- The script used when storeMode is 'db' --------------------------------\n-- the table to store GlobalSession data\nCREATE TABLE IF NOT EXISTS `global_table`\n(\n    `xid`                       VARCHAR(128) NOT NULL,\n    `transaction_id`            BIGINT,\n    `status`                    TINYINT      NOT NULL,\n    `application_id`            VARCHAR(32),\n    `transaction_service_group` VARCHAR(32),\n    `transaction_name`          VARCHAR(128),\n    `timeout`                   INT,\n    `begin_time`                BIGINT,\n    `application_data`          VARCHAR(2000),\n    `gmt_create`                DATETIME,\n    `gmt_modified`              DATETIME,\n    PRIMARY KEY (`xid`),\n    KEY `idx_gmt_modified_status` (`gmt_modified`, `status`),\n    KEY `idx_transaction_id` (`transaction_id`)\n) ENGINE = InnoDB\n  DEFAULT CHARSET = utf8;\n\n-- the table to store BranchSession data\nCREATE TABLE IF NOT EXISTS `branch_table`\n(\n    `branch_id`         BIGINT       NOT NULL,\n    `xid`               VARCHAR(128) NOT NULL,\n    `transaction_id`    BIGINT,\n    `resource_group_id` VARCHAR(32),\n    `resource_id`       VARCHAR(256),\n    `branch_type`       VARCHAR(8),\n    `status`            TINYINT,\n    `client_id`         VARCHAR(64),\n    `application_data`  VARCHAR(2000),\n    `gmt_create`        DATETIME(6),\n    `gmt_modified`      DATETIME(6),\n    PRIMARY KEY (`branch_id`),\n    KEY `idx_xid` (`xid`)\n) ENGINE = InnoDB\n  DEFAULT CHARSET = utf8;\n\n-- the table to store lock data\nCREATE TABLE IF NOT EXISTS `lock_table`\n(\n    `row_key`        VARCHAR(128) NOT NULL,\n    `xid`            VARCHAR(96),\n    `transaction_id` BIGINT,\n    `branch_id`      BIGINT       NOT NULL,\n    `resource_id`    VARCHAR(256),\n    `table_name`     VARCHAR(32),\n    `pk`             VARCHAR(36),\n    `gmt_create`     DATETIME,\n    `gmt_modified`   DATETIME,\n    PRIMARY KEY (`row_key`),\n    KEY `idx_branch_id` (`branch_id`)\n) ENGINE = InnoDB\n  DEFAULT CHARSET = utf8;\n")])])])]),e._v(" "),a("li",[a("p",[e._v("在路径"),a("code",[e._v("\\seata-1.4.1-source\\script\\client\\at\\db\\mysql.sql")]),e._v(",初始化客户端SQL脚本，这里是 test模式下")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("-- for AT mode you must to init this sql for you business database. the seata server not need it.\nCREATE TABLE IF NOT EXISTS `undo_log`\n(\n    `branch_id`     BIGINT(20)   NOT NULL COMMENT 'branch transaction id',\n    `xid`           VARCHAR(100) NOT NULL COMMENT 'global transaction id',\n    `context`       VARCHAR(128) NOT NULL COMMENT 'undo_log context,such as serialization',\n    `rollback_info` LONGBLOB     NOT NULL COMMENT 'rollback info',\n    `log_status`    INT(11)      NOT NULL COMMENT '0:normal status,1:defense status',\n    `log_created`   DATETIME(6)  NOT NULL COMMENT 'create datetime',\n    `log_modified`  DATETIME(6)  NOT NULL COMMENT 'modify datetime',\n    UNIQUE KEY `ux_undo_log` (`xid`, `branch_id`)\n) ENGINE = InnoDB\n  AUTO_INCREMENT = 1\n  DEFAULT CHARSET = utf8 COMMENT ='AT transaction mode undo table';\n")])])])])])]),e._v(" "),a("li",[a("p",[e._v("上传配置到Nacos并启动Seata-Server")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("上传配置")]),e._v(" "),a("p",[e._v("启动Nacos，然后在"),a("code",[e._v("\\seata-1.4.1-source\\script\\config-center\\nacos")]),e._v("路径下，执行"),a("code",[e._v("nacos-config.sh")]),e._v("，打开Git Bash，然后输入"),a("code",[e._v("sh nacos-config.sh")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/rule-liu/pic/raw/master/img/image-20210408222345416.png",alt:"image-20210408222345416"}})]),e._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/rule-liu/pic/raw/master/img/image-20210408222734149.png",alt:"image-20210408222734149"}})])]),e._v(" "),a("li",[a("p",[e._v("启动Seata-Server，在下载好的直接运行的 Seata包中，路径为"),a("code",[e._v("D:\\Software\\seata\\bin")]),e._v("，直接双击seata-server.bat.")])])])])]),e._v(" "),a("h2",{attrs:{id:"spring-cloud-集成-seata"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-集成-seata"}},[e._v("#")]),e._v(" Spring Cloud 集成 Seata")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("配置Spring Cloud 服务 application.yml")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("两个客户端，一个是消息生产者"),a("code",[e._v("nacos-service-provider")]),e._v("，一个是消息消费者"),a("code",[e._v("nacos-service-consumer")]),e._v("。分别配置它们的 application.yml")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("nacos-service-provider")]),e._v(" application.yml")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('server:\n  port: 8081\n#Seata分布式事务配置(AT模式)\nseata:\n  enabled: true\n  application-id: nacos-service-provider\n  tx-service-group: my_test_tx_group\n  config:\n    type: nacos\n    nacos:\n      server-addr: 127.0.0.1:8848\n      group: SEATA_GROUP\n      username: ""\n      password: ""\n  registry:\n    type: nacos\n    nacos:\n      application: seata-server\n      server-addr: 127.0.0.1:8848\n      group : "SEATA_GROUP"\n      username: ""\n      password: ""\n')])])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("nacos-service-consumer")]),e._v(" application.yml")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('server:\n  port: 8082\nseata:\n  enabled: true\n  application-id: nacos-service-consumer\n  tx-service-group: my_test_tx_group\n  config:\n    type: nacos\n    nacos:\n      server-addr: 127.0.0.1:8848\n      group: SEATA_GROUP\n      username: ""\n      password: ""\n  registry:\n    type: nacos\n    nacos:\n      application: seata-server\n      server-addr: 127.0.0.1:8848\n      group : "SEATA_GROUP"\n      username: ""\n      password: ""\n')])])])])])]),e._v(" "),a("li",[a("p",[e._v("启动项目，此时在Nacos中有三个服务已经注册在上面")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/rule-liu/pic/raw/master/img/image-20210408223810756.png",alt:"image-20210408223810756"}})])])]),e._v(" "),a("h2",{attrs:{id:"实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实践"}},[e._v("#")]),e._v(" 实践")]),e._v(" "),a("blockquote",[a("p",[e._v("前提：nacos-service-provider 发送消息告诉 nacos-service-consumer，增加用户信息。此时需要在 provider 端增加一条消息发送记录，然后再 consumer 端再增加一条用户信息。")])]),e._v(" "),a("h3",{attrs:{id:"依赖文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#依赖文件"}},[e._v("#")]),e._v(" 依赖文件")]),e._v(" "),a("p",[e._v("Provider、Consumer 都是一样")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('依赖版本\n<dependencyManagement>\n    \x3c!--springcloud--\x3e\n    <dependencies>\n    <dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-dependencies</artifactId>\n    <version>Hoxton.SR5</version>\n    <type>pom</type>\n    <scope>import</scope>\n    </dependency>\n    \x3c!--springcloud alibaba--\x3e\n    <dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-alibaba-dependencies</artifactId>\n    <version>2.2.1.RELEASE</version>\n    <type>pom</type>\n    <scope>import</scope>\n    </dependency>\n    </dependencies>\n</dependencyManagement>\n\n\n<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>com.rule.demo</groupId>\n        <artifactId>nacos-spring-cloud-demo</artifactId>\n        <version>0.0.1-SNAPSHOT</version>\n    </parent>\n    <groupId>com.rule</groupId>\n    <artifactId>nacos-service-consumer</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>nacos-service-consumer</name>\n    <description>Project for Spring Boot</description>\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n    <dependencies>\n        \x3c!--seata--\x3e\n        <dependency>\n            <groupId>io.seata</groupId>\n            <artifactId>seata-spring-boot-starter</artifactId>\n            <version>1.4.0</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>com.alibaba</groupId>\n                    <artifactId>druid</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-seata</artifactId>\n            <exclusions>\n                <exclusion>\n                    <groupId>io.seata</groupId>\n                    <artifactId>seata-spring-boot-starter</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n        \x3c!--mysql--\x3e\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.13</version>\n        </dependency>\n        \x3c!--mybatis-plus--\x3e\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus</artifactId>\n            <version>3.4.2</version>\n        </dependency>\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n            <version>3.0.5</version>\n        </dependency>\n        <dependency>\n            <groupId>org.mybatis.spring.boot</groupId>\n            <artifactId>mybatis-spring-boot-starter</artifactId>\n            <version>2.1.3</version>\n        </dependency>\n        \x3c!-- 引入Druid依赖，阿里巴巴所提供的数据源 --\x3e\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid</artifactId>\n            <version>1.1.10</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n')])])]),a("h3",{attrs:{id:"实现-provider-端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现-provider-端"}},[e._v("#")]),e._v(" 实现 provider 端")]),e._v(" "),a("p",[e._v("​\t主要是三个文件  UserClient、MessageInfo、MessageController、MessageMapper")]),e._v(" "),a("p",[e._v("​\t"),a("img",{attrs:{src:"https://gitee.com/rule-liu/pic/raw/master/img/image-20210408225202674.png",alt:"image-20210408225202674"}})]),e._v(" "),a("ol",[a("li",[a("p",[e._v("UserClient")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('/**\n * 修改用户名接口\n */\n@FeignClient("nacos-service-consumer")\npublic interface UserClient {\n\n    @PostMapping("/user")\n    void updateUserInfo(@RequestParam("id") String id,\n                        @RequestParam("username") String username);\n\n}\n')])])])]),e._v(" "),a("li",[a("p",[e._v("MessageInfo")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Getter\n@Setter\n@TableName(value = "t_message")\n@Builder\npublic class MessageInfo {\n\n    /**\n     * id\n     */\n    @TableId(value = "id", type = IdType.AUTO)\n    private Integer id;\n\n    /**\n     * 标题\n     */\n    private String title;\n\n    /**\n     * 请求内容\n     */\n    private String body;\n\n    /**\n     * 类型\n     */\n    private String type;\n\n}\n')])])])]),e._v(" "),a("li",[a("p",[e._v("MessageController")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('/**\n * 生产者服务，测试seata\n */\n@RestController\n@RequestMapping("/provider")\npublic class MessageController {\n\n    @Resource\n    private MessageMapper messageMapper;\n\n    @Autowired\n    private UserClient userClient;\n\n    /**\n     * 发送消息修改用户信息\n     */\n    @GetMapping("/send")\n    // @GlobalTransactional  配置全局的事务方案\n//    @GlobalTransactional \n    public void sendMessage() {\n        // 添加消息\n        MessageInfo messageInfo = MessageInfo.builder().title("update user username")\n                .body("{\\"id\\":\\"1\\", \\"username\\":\\"jarry\\"}")\n                .type("send").build();\n\n        messageMapper.insert(messageInfo);\n        JSONObject body = JSON.parseObject(messageInfo.getBody());\n        // 调用userClient 增加用户信息\n        String username = body.getString("username") + System.currentTimeMillis();\n        userClient.updateUserInfo(body.getString("id"), username);\n        throw new RuntimeException("修改失败");\n    }\n}\n')])])])]),e._v(" "),a("li",[a("p",[e._v("MessageMapper")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@Mapper\npublic interface MessageMapper extends BaseMapper<MessageInfo> {\n}\n")])])])])]),e._v(" "),a("h3",{attrs:{id:"实现-consumer-端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现-consumer-端"}},[e._v("#")]),e._v(" 实现 consumer 端")]),e._v(" "),a("p",[e._v("​\t主要是三个文件  UserInfo、UserController、UserMapper")]),e._v(" "),a("p",[e._v("​\t"),a("img",{attrs:{src:"https://gitee.com/rule-liu/pic/raw/master/img/image-20210408225234940.png",alt:"image-20210408225234940"}})]),e._v(" "),a("ol",[a("li",[a("p",[e._v("UserInfo")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Data\n@TableName(value = "t_user")\n@Builder\npublic class UserInfo {\n\n    @TableId(value = "ID", type = IdType.AUTO)\n    private Integer id;\n\n    /**\n     * 用户名\n     */\n    private String username;\n\n    /**\n     * 密码\n     */\n    private String password;\n\n    /**\n     * 权限\n     */\n    private String authorities;\n\n}\n')])])])]),e._v(" "),a("li",[a("p",[e._v("UserController")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@RestController\n@RequestMapping("/user")\npublic class UserController {\n\n\n    @Resource\n    private UserMapper userMapper;\n\n    @PostMapping\n    public void updateUserInfo(@RequestParam("id") String id,\n                               @RequestParam("username") String username) {\n\n        // 增加一条用户信息\n        UserInfo userInfo = UserInfo.builder().username(username).password("123456").authorities("123").build();\n        userMapper.insert(userInfo);\n    }\n}\n')])])])]),e._v(" "),a("li",[a("p",[e._v("UserMapper")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@Mapper\npublic interface UserMapper extends BaseMapper<UserInfo> {\n}\n")])])])]),e._v(" "),a("li",[a("p",[e._v("模拟正常的逻辑下，出现分布式事务")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("分别在两个客户端的控制层加上 "),a("code",[e._v("@Transactional")]),e._v("注解。模拟出现运行时异常时，让两者都不增加数据，结果却是 t_message没有增加，但是 t_user 增加一条用户")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    @GetMapping("/send")\n    @Transactional\n    public void sendMessage() {\n        ``````\n        ``````\n        throw new RuntimeException("修改失败");\n    }\n    \n        @PostMapping\n    @Transactional\n    public void updateUserInfo(@RequestParam("id") String id,\n                               @RequestParam("username") String username) {\n        // 增加一条用户信息\n        UserInfo userInfo = UserInfo.builder().username(username).password("123456").authorities("123").build();\n        userMapper.insert(userInfo);\n    }\n')])])])]),e._v(" "),a("li",[a("p",[e._v("模拟请求，查看结果")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/rule-liu/pic/raw/master/img/image-20210408225834979.png",alt:"image-20210408225834979"}})]),e._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/rule-liu/pic/raw/master/img/image-20210408230036386.png",alt:"image-20210408230036386"}})])])])]),e._v(" "),a("li",[a("p",[e._v("模拟使用 Seata，解决分布式事务")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("只需要在 MessageController 上增加 "),a("code",[e._v("@GlobalTransactional")]),e._v(" 注解。清空下两个表，再次模拟出现运行时异常时，结果时两者都没有增加数据。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@GetMapping("/send")\n    // @GlobalTransactional  配置全局的事务方案\n    @GlobalTransactional\n    public void sendMessage() {\n\t\t````\n\t\t````\n\t\tthrow new RuntimeException("修改失败");\n    }\n')])])])]),e._v(" "),a("li",[a("p",[e._v("模拟请求，查看结果")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/rule-liu/pic/raw/master/img/image-20210408230601241.png",alt:"image-20210408230601241"}})])])])])])])}),[],!1,null,null,null);n.default=t.exports}}]);